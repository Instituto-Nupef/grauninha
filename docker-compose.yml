version: "2.1"

volumes:
  #  pihole_config:
  # dnsmasq_config:
  # proxy:
  # certs:
  # jellyfin-config:
  # jellyfin-cache:
  # media:
  # jellyfin-lib:
  # calibre:
  # calibre-config:
  portal:
  nextcloud:
  portal-config:
  # proxy_mysql:
  # nextcloud_mysql:
  kolibri:
  kiwix:
  influxdb:
  grafana:
  #browser-settings:
  # pulse:
  # map:
services:
  # https://github.com/balenablocks/wifi-connect
  # wifi-connect:
  #   build: services/wifi-connect
  #   restart: always
  #   network_mode: host
  #   privileged: true
  #   labels:
  #     io.balena.features.dbus: "1"
  #     io.balena.features.firmware: "1"
  #   environment:
  #     PORTAL_SSID: Grauninha
  #     PORTAL_LISTENING_PORT: 8080
  # https://hub.docker.com/r/jc21/nginx-proxy-manager
  # proxy:
  #   build: services/proxy
  #   ports:
  #     - "80:80"
  #     - "8081:81"
  #     - "443:443"
  #   volumes:
  #     - proxy:/data
  #     - certs:/etc/letsencrypt
  #   depends_on:
  #     - proxy_db
  jellyfin:
    image: jellyfin/jellyfin
    restart: unless-stopped
    ports:
      - 8082:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    volumes:
        - jellyfin-config:/config
        - jellyfin-cache:/cache
        - media:/media
        - jellyfin-lib:/opt/vc/lib
        - 'pulse:/run/pulse'
    environment:
      PUID: 1000
      PGID: 1000
      JELLYFIN_PublishedServerUrl: guarani.io
    # devices:
    # - /dev/vchiq:/dev/vchiq #hardware acceleration for Rasp 3 e 4
    # - /dev/vcsm:/dev/vcsm #hardware acceleration for Rasp 3
  # https://hub.docker.com/r/filebrowser/filebrowser
  filebrowser:
    image: filebrowser/filebrowser:s6
    ports:
      - 8083:80
    volumes:
      - media:/srv
      - 'pulse:/run/pulse'
    environment:
      PGID: 1000
      PUID: 1000
    command: -- c
  # resilio-sync:
  #   image: lscr.io/linuxserver/resilio-sync
  #   environment:
  #     PUID: 1000
  #     PGID: 1000
  #     TZ: America/Brasil
  #   volumes:
  #     - sync-config:/config
  #     - sync-downloads:/downloads
  #     - media:/sync
  #   ports:
  #     - 8092:8888
  #     - 55555:55555
  #   restart: unless-stopped
  # https://hub.docker.com/r/pihole/pihole
  #  pihole:
  #  build: services/pihole
  #  network_mode: host
  #  privileged: true
  #  volumes:
  #    - "pihole_config:/etc/pihole"
  #    - "dnsmasq_config:/etc/dnsmasq.d"
  #  dns:
  #    - "127.0.0.1"
  #    - "1.1.1.1"
  #  environment:
  #    WEB_PORT: 8089
  #    WEBPASSWORD: grauna
  #  labels:
  #    io.balena.features.dbus: "1"
  # https://github.com/klutchell/unbound-dnscrypt
  #unbound:
  #  build: services/unbound
  #  privileged: true
  #  ports:
  #    - "5053:5053/tcp"
  #    - "5053:5053/udp"
  ## Custom
  kolibri:
    build: services/kolibri
    ports:
      - "8084:8080"
    volumes:
      - kolibri:/root/.kolibri
   #   - 'pulse:/run/pulse'
  ## https://hub.docker.com/r/kiwix/kiwix-serve
  kiwix:
  #  build: services/kiwix
    image: offlineinternet/kiwix 
    restart: unless-stopped
    ports:
      - "8085:80"
  #  # Adicionar manual em: resin-data/docker/volumes/<APP ID>_<VOLUME NAME>/_<CONTAINER DIRECTORY>
    volumes:
      - kiwix:/data
    command: "*.zim"
    # Se quiser baixar arquivos
    # uncomment next 2 lines to use it with remote zim file
    # environment:
    #   DOWNLOAD: "https://download.kiwix.org/zim/wikivoyage/wikivoyage_pt_all_maxi_2022-01.zim"
    #   DOWNLOAD: "https://download.kiwix.org/zim/wikipedia/wikipedia_pt_all_maxi_2021-11.zim"
    #   DOWNLOAD: "https://download.kiwix.org/zim/wikisource/wikisource_pt_all_maxi_2022-01.zim"
    #   DOWNLOAD: "https://download.kiwix.org/zim/wiktionary/wiktionary_pt_all_maxi_2022-01.zim"
    #   DOWNLOAD: "https://download.kiwix.org/zim/wikinews/wikinews_pt_all_maxi_2022-01.zim"

   #   DOWNLOAD: "https://download.kiwix.org/zim/wikiversity/wikiversity_pt_all_maxi_2022-01.zim"
  # https://hub.docker.com/_/nextcloud/

  nextcloud:
    image: nextcloud
    privileged: true
    ports:
      - '8087:80'
    volumes:
       - nextcloud:/var/www/html
   #   - nextcloud:/var/www/html/data 
   #     NEXTCLOUD_TRUSTED_DOMAINS: "grauna.local *.balena-devices.com"
    restart: unless-stopped   

  collectd:
    image: intel/observability-collectd
    privileged: true
    ports:
      - '8086:8086'
      - '25826:25826/udp'

    restart: unless-stopped   

  influxdb:
    image: influxdb
    privileged: true
    ports:
      - '8090:80'
    volumes:
      - influxdb:/var/lib/influxdb
      - influxdb:/etc/influxdb/
      ## - ./configs/influxdb/types.db:/usr/share/collectd/types.db:ro
    restart: unless-stopped   
    
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana:/var/lib/grafana/
      - grafana:/etc/grafana/provisioning/            
    restart: unless-stopped

  
  
  # # https://hub.docker.com/r/alexta69/metube
  # metube:
  #   image: alexta69/metube
  #   ports:
  #     - 8086:8081
  #   volumes:
  #     - media:/downloads
  #     - 'pulse:/run/pulse'
  #   environment:
  #     DOWNLOAD_DIR: /downloads/metube-video
  #     AUDIO_DOWNLOAD_DIR: /downloads/metube-audio
  # https://hub.docker.com/r/linuxserver/calibre-web/
  # calibre:
  #   image: linuxserver/calibre-web
  #   environment:
  #     PGID: 1000
  #     PUID: 1000
  #     TZ: America/Brasil
  #     PASSWORD: grauna
  #   ports:
  #     - 8091:8083
  #   volumes:
  #     - calibre-config:/config
  #     - calibre:/books
  #   restart: unless-stopped
  # https://hub.docker.com/r/communityfirst/live-server
  portal:
    build: services/portal
    restart: unless-stopped
    ports:
      - 80:8080
    volumes:
      - portal:/var/www
    # map:
    #   build: services/map
    #   restart: unless-stopped
    #   ports:
    #     - 8090:8080
    #   volumes:
    #     - map:/var/www
    # # https://hub.docker.com/r/linuxserver/code-server
  # code:
  #   image: ghcr.io/linuxserver/code-server
  #   ports:
  #     - 8090:8443
  #   restart: unless-stopped
  #   volumes:
  #     - portal-config:/config
  #     - portal:/config/workspace
  #   environment:
  #     PUID: 1000
  #     PGID: 1000
  #     TZ: America/Brasil
  #     PASSWORD: grauna
  #     PROXY_DOMAIN: code.grauna.local
  # https://hub.docker.com/r/yobasystems/alpine-mariadb
  # proxy_db:
  #   image: yobasystems/alpine-mariadb:10.5.11
  #   volumes:
  #     - proxy_mysql:/var/lib/mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: "npm"
  #     MYSQL_DATABASE: "npm"
  #     MYSQL_USER: "npm"
  #     MYSQL_PASSWORD: "npm"
  #     ROOT_PASSWORD: "npm"
  #   command:
  #     - --transaction-isolation=READ-COMMITTED
  #     - --character-set-server=utf8mb4
  #     - --collation-server=utf8mb4_unicode_ci
  #     - --max-connections=512
  #     - --innodb-rollback-on-timeout=OFF
  #     - --innodb-lock-wait-timeout=50
  #     - --binlog-format=ROW
  #     # - --skip-innodb-read-only-compressed
  #   # Repurpose the healthcheck cmd by having it export our database on a schedule.
  #   # Run the backup every 1 hour to a file called hourly-backup.sql.
  #   # How to restore: <https://mariadb.com/kb/en/mysqldump/#restoring>
  #   healthcheck:
  #     test: mysqldump -uroot -p$MYSQL_ROOT_PASSWORD --all-databases --result-file=/var/lib/mysql/hourly-backup.sql || exit 0
  #     interval: 1h
  #     timeout: 30s
  #     retries: 3
  # https://hub.docker.com/r/yobasystems/alpine-mariadb
  # nextcloud_db:
  #   image: yobasystems/alpine-mariadb:10.5.11
  #   volumes:
  #     - nextcloud_mysql:/var/lib/mysql
  #   environment:
  #     MYSQL_DATABASE: nextcloud
  #     MYSQL_USER: nextcloud
  #     MYSQL_PASSWORD: nextcloud
  #     MYSQL_ROOT_PASSWORD: balena
  #   command:
  #     - --transaction-isolation=READ-COMMITTED
  #     - --character-set-server=utf8mb4
  #     - --collation-server=utf8mb4_unicode_ci
  #     - --max-connections=512
  #     - --innodb-rollback-on-timeout=OFF
  #     - --innodb-lock-wait-timeout=50
  #     - --binlog-format=ROW
  #   healthcheck:
  #     test: mysqldump -uroot -p$MYSQL_ROOT_PASSWORD --all-databases --result-file=/var/lib/mysql/hourly-backup.sql || exit 0
  #     interval: 1h
  #     timeout: 30s
  #     retries: 3

  # https://hub.docker.com/_/redis
  # redis:
  #   image: redis:6.0.8-alpine
  #   command: redis-server --requirepass nextcloud
  # https://github.com/balenablocks/browser
  # browser:
  #   image: balenablocks/browser
  #   privileged: true # required for UDEV to find plugged in peripherals such as a USB mouse
  #   network_mode: host
  #   ports:
  #       - '5011' # management API (optional)
  #       - '35173' # Chromium debugging port (optional)
  #   volumes:
  #     - 'browser-settings:/data' # Only required if using PERSISTENT flag (see below)
  #     - 'pulse:/run/pulse'
  #   environment:
  #     PULSE_SERVER: unix:/run/pulse/pulseaudio.socket
  #     LAUNCH_URL: http://localhost
  #     PERSISTENT: 1
  #     SHOW_CURSOR: 1
  #     DISPLAY_NUM: 1
  #     KIOSK: 0
  # # https://github.com/balenablocks/audio
  # audio:
  #   image: balenablocks/audio
  #   privileged: true
  #   labels:
  #     io.balena.features.dbus: 1  # Only required for bluetooth support
  #   ports:
  #     - 4317:4317                 # Only required if using PA over TCP socket
  #   volumes:
  #     - 'pulse:/run/pulse'
  #   environment:
  #     AUDIO_OUTPUT: AUTO
  #     AUDIO_VOLUME: 100%
  # # https://github.com/synapzlu/balena-zerotier
  # zerotier:
  #   # This volume is needed to make ZT configuration survive a reboot and new container version
  #   volumes:
  #     - zerotier:/var/lib/zerotier-one
  #   build: services/zerotier
  #   # privileged is needed for ZeroTier to avoid "cannot bind to local control interface port" error
  #   privileged: true
  #   network_mode: host
  #   # SYS_ADMIN is needed because NET_ADMIN does not include the ioctl() required to put /dev/net/tun in tap mode.
  #   # Source : https://zerotier.atlassian.net/wiki/spaces/SD/pages/7536656/Running+ZeroTier+in+a+Docker+Container
  #   # NET_ADMIN is also needed to avoid "zerotier-one: fatal error: cannot bind to local control interface port" error
  #   cap_add:
  #     - SYS_ADMIN
  #     - NET_ADMIN
  #   # Enable dbus communications for nmcli commands
  #   # Source : https://github.com/balena-io/wifi-connect
  #   labels:
  #     io.balena.features.dbus: '1'
  #   environment:
  #     DBUS_SYSTEM_BUS_ADDRESS: "unix:path=/host/run/dbus/system_bus_socket"
  # https://github.com/balenablocks/hostname
  hostname:
    image: balenablocks/hostname
    restart: no
    labels:
      io.balena.features.supervisor-api: 1
    environment:
      SET_HOSTNAME: grauna
  # https://github.com/balena-io-examples/balena-storage
  external-drive:
    build: services/storage
    privileged: true
    volumes:
      #- media:/usr/src/media
      #- jellyfin-config:/usr/src/jellyfin-config
      - kiwix:/usr/src/kiwix
      # - calibre:/usr/src/calibre
      - portal:/usr/src/portal
      - nextcloud:/usr/src/nextcloud
      - kolibri:/usr/src/kolibri
      # - map:/usr/src/map

